package com.holtebu.bosetterne.service;


import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.skife.jdbi.v2.DBI;

import com.google.common.base.Optional;
import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheLoader;
import com.google.common.cache.LoadingCache;
import com.google.inject.AbstractModule;
import com.google.inject.Provides;
import com.google.inject.Scopes;
import com.google.inject.TypeLiteral;
import com.google.inject.name.Named;
import com.google.inject.name.Names;
import com.holtebu.bosetterne.api.Spiller;
import BosetterneAuthenticator;
import com.holtebu.bosetterne.service.auth.InjectableOAuthProvider;
import JDBILobbyService;
import LobbyService;
import Polettlager;
import PolettlagerIMinne;
import AccessToken;
import Legitimasjon;
import LobbyDAO;
import com.holtebu.bosetterne.service.inject.names.Realm;

import io.dropwizard.auth.Authenticator;
import io.dropwizard.auth.basic.BasicCredentials;
import io.dropwizard.setup.Environment;
import io.dropwizard.jdbi.DBIFactory;

public class BosetterneModule extends AbstractModule {
	final String REALM = "protected-resources";
	
	private BosetterneConfiguration configuration;
	//private final Environment environment;
	private final Integer INIT_ANTALL_SPILL = 20;
	private DBI jdbi;
	
	private final String basePath = "/WebContent/";
	
	public BosetterneModule() {}
    
	public BosetterneModule(final BosetterneConfiguration configuration, Environment environment) {
		this.configuration = configuration;
		//this.environment = environment;
		this.jdbi = getJDBI(environment, new DBIFactory());
	}
	
	public BosetterneModule(final BosetterneConfiguration configuration, DBI dbi) {
		this.configuration = configuration;
		this.jdbi = dbi;
	}
	
	public void setConfiguration(BosetterneConfiguration configuration){
		this.configuration = configuration;
	}
	
	public void setJDBI(Environment environment){
		this.jdbi = getJDBI(environment, new DBIFactory());
	}
	
	@Override
    protected void configure() {
    	bind(BosetterneConfiguration.class).toInstance(configuration);
    	//bind(Environment.class).toInstance(environment);
    	bind(OAuth2Cred.class).toInstance(configuration.getOauth2());
		bind(new TypeLiteral<Map<String, Spiller>>(){}).to(new TypeLiteral<HashMap<String, Spiller>>(){});
		bind(new TypeLiteral<Map<String, Legitimasjon>>(){}).to(new TypeLiteral<HashMap<String, Legitimasjon>>(){});
        bind(String.class).annotatedWith(Names.named("getit")).toInstance("ingenting");
        bind(Integer.class).annotatedWith(Names.named("antallSpill")).toInstance(INIT_ANTALL_SPILL);
        bind(String.class).annotatedWith(Realm.class).toInstance(REALM);
        //bind(DBI.class).toInstance(jdbi); //Trengs denne?
        
        //Bindtemplates
        //bind(String.class).annotatedWith(LoggInnTemplate.class).toInstance("/WebContent/lobby/login.mustache");
        //bind(String.class).annotatedWith(HjemTemplate.class).toInstance("/WebContent/lobby/hjem.mustache");
        
        bind(InjectableOAuthProvider.class).to(new TypeLiteral<InjectableOAuthProvider<Spiller>>(){});
        bind(new TypeLiteral<Polettlager<AccessToken, Spiller, Legitimasjon, String>>(){}).to(PolettlagerIMinne.class).in(Scopes.SINGLETON);
        bind(new TypeLiteral<LobbyService<Optional<Spiller>, BasicCredentials>>(){}).to(JDBILobbyService.class).in(Scopes.SINGLETON);
        bind(new TypeLiteral<Authenticator<String, Spiller>>(){}).to(BosetterneAuthenticator.class).in(Scopes.SINGLETON);
    }
    
	/**
	 * @return the single JDBI instance required
	 */
    DBI getJDBI(Environment environment, final DBIFactory factory){
    	DBI jdbi = null;
        try {
        	jdbi = factory.build(environment, configuration.getDataSourceFactory(), "mySQL");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new RuntimeException("Kunne ikke starte opp databasen!");
		}
        return jdbi;
    }
    
	@Provides
	LobbyDAO provideSpillerDAO () {
        return jdbi.onDemand(LobbyDAO.class);
	}
	
	@Provides @Named("spillerCacheDAO")
	LobbyDAO provideSpillerCacheDAO () {
        return jdbi.onDemand(LobbyDAO.class);
	}
	
	@Provides @Named("spillerCache")
	public LoadingCache<String, Optional<Spiller>> provideSpillerCache(@Named("spillerCacheDAO") final LobbyDAO dao){
		CacheLoader<String, Optional<Spiller>> loader = new CacheLoader<String, Optional<Spiller>> () {
			  public Optional<Spiller> load(String key) throws Exception {
				  return Optional.fromNullable(dao.finnSpillerVedNavn(key));
			  }
		};

		return CacheBuilder.newBuilder()
	       .maximumSize(1000)
	       .expireAfterWrite(1, TimeUnit.HOURS)
	       .build(loader);
	}
}
